<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[客户端开发接口mock的几种方式]]></title>
    <url>%2F2018%2F03%2F27%2F%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3mock%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[说一说客户端开发中，模拟api请求的几种方式。 硬编码直接修改传入参数，比如一个app分老师和学生两个角色，两个角色的布局是不一样的，用户角色role 字段1代表学生，2代表老，我们可以分别写死role=1和role=2来分别编写相关角色下的页面。能够解决基本问题。但是效率太低，对代码入侵太大。 切换两个角色，如果不改代码就好了。charles的map功能就能解决这一点，并且对代码没有入侵。 巧用charles的map功能针对特定的接口charles能够给你返回你想要的数据。至于charles的基本使用方法请自行百度。使用charles的map local功能能将接口的返回映射到本地的一个json文件。比如设置请求用户角色的接口，咱们可以在每次请求前修改本地映射文件数据的role字段的值，来控制返回数据，从而达到调试的目的。 这么看来其实charles很适合做接口调试，我也用了很长一段时间确实很方便。但是他有一个问题，必须配置代理。那么问题就来了，1.是配置代理后会影响其他方面，比如某些app不能使用，那么你还得记得关掉代理，有时候很让人抓狂。2.安全性要求高的通信，比如添加了https认证，那么认证就得关掉。 相比Charles，rap系统就不用添加代理可以直接修改返回值。 rap阿里出的rap ，口号是提高效率，回家吃晚饭。 确实如他口号所说，正确使用这个mock系统能让我们节省不少时间。他比charles map 进步的方式在于不在需要配置代理，只需要将接口地址修改为mock系统的地址就行了，很方便。当然rap的功能远不止这些，您可以查看官网的介绍，此处不在详细介绍了。 rap当然也有问题，比如你们几个人一起调试的时候，你修改role为老师，而另外一个同事需要修改role为同学，这就冲突了，因为你们使用的是同一套系统。再者rap有一套返回数值生成规则，熟悉这些规则也得花费不少时间。 能不能我就调试自己的接口，且对别人没有影响，而且不要太复杂就能，自由的更改我想要的数据呢？目前我还没有找到这样的工具，我想我的需求很简单啊，既然没有那我就动手自己做一个吧！ 自建mock自己动手，丰衣足食。 无论是在开发还是在调试bug，我们需要考虑各种情况，特别是某些极端情况。而这些各种不同情况的复现，从app的角度来看，大部分都是由于接口数据导致的，那么我们就直接修改返回数据到某种情况不就可以调试了吗？ 自建mock需要解决如下几个问题： 实现数据请求功能。 特定接口特定mock。很多时候我们只需要调试某一个接口，也就是说只需要mock某个接口，那么就需要做接口刷选，设置一个开关，而且这个开关是针对某个特定接口的。 返回数据改变不需要重启app。 完成上面几个需求就可以满足我们日常的调试了。 客户端项目在你的客户端项目网络请求基类上做一些修改，同时维护一个mock接口的列表，列表的每一项包括针对这个接口的mock开关的布尔值。开代表此接口走mock调试，否则否正常的测试环境。同时还需要一个全局的mock开关，全局mock开关控制整个app是否能够连接mock，release环境下必须关闭。具体实现之后我再补充一个demo。 mock server端 mock服务端请移至我的开源项目DDMock 参考文档 RAP 原创文章，转载请保留原文链接，未经授权拒绝转载，谢谢。 联系作者：dys90@qq.com]]></content>
      <categories>
        <category>应用开发</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常见问题及解决方案]]></title>
    <url>%2F2018%2F03%2F27%2Fhexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[本文记录了几个比较典型的hexo使用中的问题解决方案。 运行hexo s 之后访问http://localhost:4000/显示空白并报错 WARN No layout: index.html。 这个问题多半由主题造成的，常见的几种情况如下： 主题没有正确配置，检查站内配置文件 _config.yml看响应的主题是否安装，名字是否正确. 在一台电脑配置好后，在另一台电脑git clone xxx下来后主题没有clone下来。 运行的时候报 YAMLException xxx异常。 多半是因为hexo-server 模块没有安装，安装好就行npm install hexo-server --save 有时候长时间不写blog，再写会报一些奇怪的错误，例如 DTraceProviderBindings XXX 等。此时做好彻底清理一下工程，步骤如下： hexo clean 重装 hexo-cli 12$ npm uninstall hexo-cli -g$ npm install hexo-cli -g 删除 node_modules文件夹，重新执行 npm install 主题主题配置和主题更新 https://hexo.io/docs/configuration.html#Overriding-Theme-Config 可以在站点中添加 theme_config标签，让主题配置独立出来。将主题里面的配置文件_config.yml 配置项，复制到站点配置文件里面来，这样以后主题子仓库的更新就不会冲突了。 引用自己的文章1post_link https://hexo.io/zh-cn/docs/permalinks https://hexo.io/zh-cn/docs/tag-plugins.html 引用文章引用其他文章的链接。 12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; 注意下面这种空标签 会导致解析异常，已经亲测过。 1\&#123;\% \%\&#125; 参考文档 https://hexo.io/zh-cn/ 原创文章，转载请保留原文链接，未经授权拒绝转载，谢谢。 联系作者：dys90@qq.com]]></content>
      <categories>
        <category>应用开发</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建cocoaPod公共库和私有库]]></title>
    <url>%2F2017%2F01%2F04%2F%E5%88%9B%E5%BB%BAcocoaPod%E5%85%AC%E5%85%B1%E5%BA%93%E5%92%8C%E7%A7%81%E6%9C%89%E5%BA%93%2F</url>
    <content type="text"><![CDATA[做iOS开发，cocoapod的熟练是必须的。 本文从大框架上来阐述pod库的创建，发布等流程。不涉及具体库的开发。 结构要理解一个新的东西，应该先全局后局部。一上来就陷入局部操作细节很容易使人迷惑。 明确两个仓库： 代码仓库 Specs仓库 官仓 https://github.com/CocoaPods/Specs 建立私有的pod仓库 https://guides.cocoapods.org/making/private-cocoapods.html 代码仓库是存放你的代码的地方，spec仓库是存放库描述文件的地方，根据spec仓库的不同，我们将三方库分为公共库和私有库。官方的Specs方库和很多大公司自建对外开放的spec仓库，都可以称为共有库。私有库一般是做代码封装，内部使用。 共有库去重如果要上传代码到公共库，则名字不能重复，重复了换一个，别屁颠屁颠的弄完了提交的时候发现名字冲突了就不太好了。pod search [pod name]举例如下： 12➜ DYSKeyboardManager pod search DYSKeyboardManager[!] Unable to find a pod with name, author, summary, or description matching `DYSKeyboardManager` podspecpodspec是创建pod库的核心，无论是用pod lib create [NAME]通过模板创建pod库 还是pod spec create [pod name]一步一步来(徒手创建)pod库，这个文件都是必须了解的，具体每一podspec参数可以参考官方文档Podspec Syntax Reference我就不一一解释了。 pod lib create [pod name]一步一步来(徒手创建)的方式虽然慢，但是因为实操了每一步，所以对pod项目的了解很有帮助。不建议上来就用模板创建的方式。 创建*.podspec 文件 是代码库的描述文件，里面详细记载了代码库的相关信息。pod lib create [pod name]示例如下： 1234567➜ DYSKeyboardManager ls➜ DYSKeyboardManager pod spec create DYSKeyboardManagerSpecification created at DYSKeyboardManager.podspec➜ DYSKeyboardManager ls DYSKeyboardManager.podspec➜ DYSKeyboardManager open -a Sublime\ Text DYSKeyboardManager.podspec 打开新建的DYSKeyboardManager.podspec，可以看到里面的配置选项，根据实际情况填写，填写是否符合要求可以使用pod lib lint [pod name] --allow-warnings来验证。 验证验证podspecpod lib lint [pod name] --allow-warnings是验证当前项目设置是否符合pod库提交标准，如果验证通过，则可以进入下一步了。 例如下面就是创建完DYSKeyboardManager.podspec 没做任何修改的验证结果： 1234567891011121314151617181920➜ DYSKeyboardManager pod lib lint DYSKeyboardManager.podspec --allow-warnings -&gt; DYSKeyboardManager (0.0.1) - ERROR | license: Sample license type. - WARN | homepage: The homepage has not been updated from default - ERROR | source: The Git source still contains the example URL. - WARN | summary: The summary is not meaningful. - ERROR | description: The description is empty. - WARN | url: There was a problem validating the URL http://EXAMPLE/DYSKeyboardManager. - ERROR | [OSX] unknown: Encountered an unknown error (The `DYSKeyboardManager` pod failed to validate due to 3 errors: - ERROR | license: Sample license type. - WARN | homepage: The homepage has not been updated from default - ERROR | source: The Git source still contains the example URL. - WARN | summary: The summary is not meaningful. - ERROR | description: The description is empty.) during validation.[!] DYSKeyboardManager did not pass validation, due to 4 errors.You can use the `--no-clean` option to inspect any issue. 按照提示一项一项的修改，修改完成之后继续验证，如此反复，直到验证通过！ 随便列举几项如下： 开源协议-license 项目首页-homepage 源码地址-source 项目描述-description 简述-summary 验证通过如下： 123456DYSKeyboardManager passed validation.➜ DYSKeyboardManager pod lib lint DYSKeyboardManager.podspec --allow-warnings -&gt; DYSKeyboardManager (0.0.1)DYSKeyboardManager passed validation. 注意，这个验证通过并不意味着可以提交了。按照流程发布和使用继续。 模板pod提供创建pod库的命令行： 1pod lib create [NAME] 中间会询问你相关设置，按照提示添加即可。创建完成之后目录结构如下： 123456789101112➜ Pod cd CVGPaymentSelectedView➜ CVGPaymentSelectedView git:(master) ✗ lsCVGPaymentSelectedView LICENSECVGPaymentSelectedView.podspec README.mdExample _Pods.xcodeproj➜ CVGPaymentSelectedView git:(master) ✗ cd Example➜ Example git:(master) ✗ lsCVGPaymentSelectedView Podfile.lockCVGPaymentSelectedView.xcodeproj PodsCVGPaymentSelectedView.xcworkspace TestsPodfile➜ Example git:(master) ✗ 比手动创建要方便多了，一般开发过程用这个能节省不少时间。 发布 发布之前lint验证：pod spec lint [NAME.podspec] 验证成功才能发布，否则发布不成功。验证失败的话，按照提示修改，知道验证成功。 注册 session。 如果是首次发布需要注册 session。 执行完成之后按照提示，进入邮箱验证。 注册session 如下： 12➜ DYSKeyboardHelper git:(master) pod trunk register dys90@qq.com 'DingYusong' --description='mac' [!] Please verify the session by clicking the link in the verification email that has been sent to dys90@qq.com 发布命令：pod trunk push [NAME.podspec] 如果前面的验证都通过了，正常来说是能发布成功的！ 使用发布成功了，肯定要试一试。查找一下pod search [name]]试试。 不出意外的话肯定是如下结果： 12➜ DYSKeyboardHelper git:(master) pod search DYSKeyboardHelper[!] Unable to find a pod with name, author, summary, or description matching `DYSKeyboardHelper` 难道刚才没有提交成功吗？ 哈哈，显然不是，我在这个地方耽误了一会儿，网上也查了不找方法，大部分都不靠谱。其实主要是没有添加进pod search 缓存文件，删掉缓存重建即可！示例如下： 123456789➜ DYSKeyboardHelper git:(master) cd ~/Library/Caches/CocoaPods/➜ CocoaPods lsPods search_index.json➜ CocoaPods rm search_index.json➜ CocoaPods pod search DYSKeyboardHelper Creating search index for spec repo 'artsy'.. Done!Creating search index for spec repo 'master'.. Done!Creating search index for spec repo 'taobao-baichuansdk-alibcspecs'.. Done!➜ CocoaPods search的结果如下： 1234567-&gt; DYSKeyboardHelper (0.0.1) iOSKeyboardHelper pod 'DYSKeyboardHelper', '~&gt; 0.0.1' - Homepage: https://github.com/DingYusong/DYSKeyboardHelper - Source: https://github.com/DingYusong/DYSKeyboardHelper.git - Versions: 0.0.1 [master repo](END) 使用就不说了，如果不会用，那看这篇文章就没啥意义了。 私有库除了cocoapod官方提供的specs中心库外，还有很多其他的库，比如阿里百川的公共库http://repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecs.git还有公司内部私有库等等。私有库和共有库的差别很小，主要体现在以下几个方面： Specs库specs私有库也是一个git仓库。创建仓库的步骤就不说啦。然后将仓库添加到本地的cocoapod源如下： 1pod repo add YYIRepo http://xxx.com/Specs.git 查看本地是否添加上： 1234➜ DDToday cd ~/.cocoapods/repos➜ repos lsYYIRepo artsy dingyusong master taobao-baichuansdk-alibcspecs➜ repos 添加将私有代码库podspec文件添加到私有Specs库。 例如： 1pod repo push YYIRepo DYSKeyboardHelper.podspec 验证私有库的podspec验证和共有库的区别在于要指定source。例如： 1pod lib lint YYICustomViews.podspec --sources=http://xxx.com/Specs,master 发布私有库的发布命令和共有库是有差别的。命令如下： 1pod repo push YYIRepo YYICustomViews.podspec 使用podfile如果没有指定仓库源的话，默认使用使用官方的仓库，如果要使用其他源的代码则必须指定source。 例如要使用阿里百川的公共库： 12source 'https://github.com/CocoaPods/Specs.git'source 'http://repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecs.git' 参考文档 making-a-cocoapod getting-setup-with-trunk 本文demo：DYSKeyboardHelper 原创文章，转载请保留原文链接，未经授权拒绝转载，谢谢。 联系作者：dys90@qq.com]]></content>
      <categories>
        <category>应用开发</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>cocoaPod</tag>
        <tag>iOS</tag>
        <tag>客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2016%2F02%2F24%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[就写一写这个博客诞生的过程吧。 本文也可以叫做《如何搭建一个独立个人博客》。 hexo写博客有好多种途径，比如我之前就曾经在csdn，点点，等其他第三方平台上发表博客。 那些年写过的blog： csdn 点点(已经倒闭了，没有备份，虽然没有写几篇文章，但都是我的心血啊，想想就心疼) 在考虑了csdn，网易博客，新浪博客，等等大公司平台，不是对代码的兼容性不好，就是像点点一样不知道哪一天就挂了，同时还不能用我自己的名字做域名，不好装逼，我想了好久，最后还是决定自建博客，把蛋蛋捏在自己手里。 嗯，捏在自己手里。 为什么会选择hexo呢？在决定自建博客起，我就考虑了Wordpress，hexo，最后还是选择了hexo。有以下几点原因： hexo比wordpress简单。 hexo默认使用markdown来编写，这点很合我胃口。 hexo搭建博客能直接放到github上发布，省了自建服务器的事，同时如果不想自定义域名，github提供的域名也不错啊。 hexo使用的是nodejs，这个很贴合这两年的技术发展路径。 总的来说，使用hexo+github这样的组合，对于写技术博客的人来说已经足够了。 创建博客网站 用hexo怎么最快弄出一个个人博客？ 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ hexo s 然后访问http://localhost:4000/恭喜你，博客已经建成了，就是这么简单！ 往前退一步，hexo哪来？ 1npm install hexo-cli -g 全局安装hexo命令行。 再往前推一步，npm是个啥？ node包管理工具，安装node之后会自带npm。npm可以安装nodejs包。 再往前一步，node如何安装？ nodejs官网，我使用的是mac，mac用户直接brew install node 再深一层，nodejs是啥？ 这篇文章可以不用看了。 写博客 hexo new [layout] &lt;title&gt;layout是文件布局，scaffolds文件内默认有3种布局方式：draft，page，post。分别对应source文件内的 _drafts, source, _pages文件夹。 post 是要发布的文章，draft是草稿不会发布。 一般常见的姿势是这样的： 新建一个博客： 1hexo new "论门卫三问" 开始编写博客 1open -a Typora 论门卫三问.md 写完之后发布 1hexo d -g 博客发布部署刚开始的时候可以依赖github做发布。具体步骤如下： github账号，没有就注册一个。 弄一个github pages 仓库，具体怎么搞，参考官方文档啊 配置hexo 的部署配置，细节怎么搞，参考官方文档啊 hexo d一个命令就发布了。 当然啦你可以有无数种发布方式，这只是hexo的一种部署方法。 网站建起来了，博客写起来了，也能发布出去了，目前来解决了~生存~的问题，哈哈，可是再进一步，我觉得主题不好看，逼格没有别人高啊，杂办？好办，换主题！ 主题 主题从哪里来？ 百度，知乎，hexo 主题一刷一大把。 主题怎么安装？ 下载下来，放到themes文件夹,然后配置项目 _config.yml文件。还有其他例如直接git clone高级玩法，慢慢研究吧。 安装完成了，怎么配置？ 主题的配置文件和hexo的配置文件名字一样都是_config.yml位置不同，注意别弄错了，具体的配置看某个主题的介绍。比如我用的next的配置官方介绍在这。 哈哈，好了，漂亮的主题也整上了。百尺竿头更近一步，域名搞成我自己的名字岂不是更个性啊！搞起来 http://dingyusong.github.io/. 搞成 http://dingyusong.com/ 域名弄个性域名分两步，1.买域名，2.域名解析。 买域名 去哪买，我就不打广告了，自己搜去。 域名解析 简单来讲就是当你访问 http://dingyusong.com/ 给你转到 http://dingyusong.github.io/. 或者你的服务器ip。域名解析在你的域名提供商都可以设置。当然还有些细节需要注意，请自行百度。 参考文档 hexo 官网 原创文章，转载请保留原文链接，未经授权拒绝转载，谢谢。 联系作者：dys90@qq.com]]></content>
      <categories>
        <category>应用开发</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>node</tag>
      </tags>
  </entry>
</search>
